/*Stephen O'Neil
  Micro 2
  Lab 1*/

  int counter = 0;      //used for interrupt timing
  int state = 0;        //state of LEDs (state 0 --> red flashing)
  int go = 0;
  const int red = 5, green = 6, yellow = 7;   //led pins
  const int start = 10;       //start process pin
  const int buzz = 11;      //buzzer pin
 
  void setup() {
    //initialize pins
    pinMode(red, OUTPUT);
    pinMode(green, OUTPUT);
    pinMode(yellow, OUTPUT);
    pinMode(buzz, OUTPUT);
    pinMode(start, INPUT);

    
    cli(); //clears global interrupt flags

    //timer1
    TCCR1A = 0;   //sets TCCR1A register to all 0
    TCCR1B = 0;  // same as above
    TCNT1 = 0;    //initialize counter val to 0

    OCR1A = 15624l; //(16*10^6) / (1*1024) - 1    (must be <65536)
                  //16 MHz / (Hz inc * 1024) - 1    
                  // will give 1Hz increments 
    //turn on CTC mode
    TCCR1B |= (1 << WGM12);    //counter cleared to 0 when TCNT1 == OCR1A
    //set CS12 and CS10 bits for 1024 scaler
    TCCR1B |= (1 << CS12) |(1 << CS10);
    //enable timer compare inter
    TIMSK1 |= (1 <<OCIE1A);

    sei();    //enables global interrupts

  
  }


ISR(TIMER1_COMPA_vect){   //in current settings, timer1 will interrupt once per sec
  
  // change state when timer == 20 for red and green, yellow == 3
  // do nothing for state 0 until in button is high

  if (state == 0) {   //resets counter to 0 for flashing red
    counter = 0;
  }
  
 if ((counter >= 17 && counter < 20) || (state == 3 && counter <3))   //will buzz for 3 sec at end of state, will deactivate when state is changed
      digitalWrite(buzz, HIGH);

  if (state == 1 || state == 2) {
    counter++;
      

    if (counter == 20) {    //once counter == 20, increment state
      counter = 0;
      state++;
      digitalWrite(buzz, LOW);  //deactivates buzzer
    }
  }

  else if (state == 3) {    //for yellow, will hold for 3 seconds
    if (counter == 3) {     //resets back to state 1
      counter = 0;
      state = 1;
      digitalWrite(buzz, LOW);
    }
  }

  else                      //guard case resets back to state 1
    state = 1;

  
  
   
    }

void loop() {

  go = digitalRead(start);          //input for start signal

  if (go == HIGH){
    state = 1;
    pinMode(start, OUTPUT);   //may prevent debounce of start button 
  }
  
 switch (state){      //controls the LEDs
    case 0:
    digitalWrite(red, !digitalRead(red));   //will invert red pin
    delay(1000);                            // 1 sec delay between inv
    break;
    
    case 1:
    digitalWrite(red, HIGH);
    digitalWrite(green, LOW);
    digitalWrite(yellow, LOW);
    break;
    
    case 2:
    digitalWrite(red, LOW);
    digitalWrite(green, HIGH);
    digitalWrite(yellow, LOW);
    break;

    case 3:
    digitalWrite(red, LOW);
    digitalWrite(green, LOW);
    digitalWrite(yellow, HIGH);
    break;

 }
  
 }
 
